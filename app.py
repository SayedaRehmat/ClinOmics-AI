 # app.py
import streamlit as st
import requests
import pandas as pd
from fpdf import FPDF
import tempfile
import os

# ------------------- CONFIG -------------------
st.set_page_config(page_title="ClinOmics AI Pro", layout="centered")
st.title("üß¨ ClinOmics AI Pro: Gene Explorer & Drug Matcher")
st.markdown("""
**AI-powered gene mutation analysis, drug discovery, and clinical trial insights.**
""")

# ------------------- API ENDPOINTS -------------------
CLINVAR_API = "https://clinicaltables.nlm.nih.gov/api/variants/v3/search"
DGIDB_API = "https://dgidb.org/api/v2/interactions.json"
TRIALS_API = "https://clinicaltrials.gov/api/query/study_fields"

# ------------------- UTILITY -------------------
def safe_text(text):
    return str(text).encode('latin1', 'ignore').decode('latin1')

def fetch_clinvar_data(gene: str):
    """Fetch ClinVar mutation data."""
    try:
        params = {"terms": gene, "maxList": 10}
        r = requests.get(CLINVAR_API, params=params, timeout=10)
        r.raise_for_status()
        data = r.json()
        return [{"Variant": d[0], "ClinicalSignificance": d[1]} for d in data[3][:10]]
    except Exception as e:
        return [{"error": f"ClinVar API failed: {e}"}]

def fetch_drug_data(gene: str):
    """Fetch drug interaction data from DGIdb."""
    try:
        r = requests.get(DGIDB_API, params={"genes": gene}, timeout=10)
        r.raise_for_status()
        interactions = r.json().get("matchedTerms", [])
        results = []
        for term in interactions:
            for interaction in term.get("interactions", []):
                results.append({"Drug": interaction["drugName"], "Source": interaction["interactionSources"][0]["source"]})
        return results if results else [{"error": "No drug data found."}]
    except Exception as e:
        return [{"error": f"DGIdb API failed: {e}"}]

def fetch_trials(gene: str):
    """Fetch clinical trial data from ClinicalTrials.gov."""
    try:
        params = {
            "expr": gene,
            "fields": "NCTId,BriefTitle,Condition,LocationCountry",
            "min_rnk": 1,
            "max_rnk": 10,
            "fmt": "json"
        }
        r = requests.get(TRIALS_API, params=params, timeout=10)
        r.raise_for_status()
        data = r.json().get("StudyFieldsResponse", {}).get("StudyFields", [])
        return [{"Trial ID": d.get("NCTId", [""])[0], "Title": d.get("BriefTitle", [""])[0]} for d in data]
    except Exception as e:
        return [{"error": f"ClinicalTrials API failed: {e}"}]

# ------------------- GENE INPUT -------------------
gene = st.text_input("üîç Enter Gene Symbol (e.g., TP53, BRCA1)").strip().upper()

expr, muts, drugs, trials = {}, [], [], []

if gene:
    st.info(f"Fetching data for **{gene}**...")
    muts = fetch_clinvar_data(gene)
    drugs = fetch_drug_data(gene)
    trials = fetch_trials(gene)

# ------------------- DISPLAY RESULTS -------------------
if gene:
    # Mutations
    if muts and "error" not in muts[0]:
        st.subheader("üß¨ Mutation Info")
        st.table(pd.DataFrame(muts))
    else:
        st.warning(muts[0].get("error", "No mutation data found."))

    # Drug Matches
    if drugs and "error" not in drugs[0]:
        st.subheader("üíä Drug Matches")
        st.table(pd.DataFrame(drugs))
    else:
        st.warning(drugs[0].get("error", "No drug matches found."))

    # Clinical Trials
    if trials and "error" not in trials[0]:
        st.subheader("üè• Clinical Trials")
        st.table(pd.DataFrame(trials))
    else:
        st.warning(trials[0].get("error", "No clinical trials found."))

# ------------------- PDF REPORT -------------------
def create_pdf_report(gene, muts, drugs, trials):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=14)
    pdf.cell(200, 10, txt=safe_text(f"ClinOmics Report: {gene}"), ln=True, align='C')
    pdf.ln(10)

    # Mutations
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(200, 10, txt="Mutation Info", ln=True)
    pdf.set_font("Arial", '', 11)
    for mut in muts:
        for k, v in mut.items():
            pdf.cell(0, 8, txt=safe_text(f"{k}: {v}"), ln=True)
        pdf.ln(2)

    # Drugs
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(200, 10, txt="Drug Matches", ln=True)
    pdf.set_font("Arial", '', 11)
    for drug in drugs:
        for k, v in drug.items():
            pdf.cell(0, 8, txt=safe_text(f"{k}: {v}"), ln=True)
        pdf.ln(2)

    # Trials
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(200, 10, txt="Clinical Trials", ln=True)
    pdf.set_font("Arial", '', 11)
    for trial in trials:
        for k, v in trial.items():
            pdf.cell(0, 8, txt=safe_text(f"{k}: {v}"), ln=True)
        pdf.ln(2)

    # Footer
    pdf.ln(10)
    pdf.set_font("Arial", 'I', 10)
    pdf.cell(200, 10, txt="Generated by ClinOmics AI Pro", ln=True, align='C')
    return pdf

if gene and muts and "error" not in muts[0]:
    if st.button("üì• Download PDF Report"):
        pdf = create_pdf_report(gene, muts, drugs, trials)
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmpfile:
            pdf.output(tmpfile.name)
            with open(tmpfile.name, "rb") as f:
                st.download_button(
                    label="‚¨áÔ∏è Download PDF Report",
                    data=f,
                    file_name=f"{gene}_ClinOmics_Report.pdf",
                    mime="application/pdf"
                )
            os.unlink(tmpfile.name)

# ------------------- FOOTER -------------------
st.markdown("""
<hr style='border: 1px solid #ddd;'>
<div style="text-align: center; color: gray;">
    Created by <b>Syeda Rehmat</b> ‚Äî Founder, <i>ClinOmics AI Pro</i>
</div>
""", unsafe_allow_html=True)
