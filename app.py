# app.py - ClinOmics AI MVP
import streamlit as st
import requests
import pandas as pd
from fpdf import FPDF
import tempfile
import os

st.set_page_config(page_title="ClinOmics AI", layout="wide")
st.title("ðŸ§¬ ClinOmics AI: AI-Powered Clinical Genomics Tool")

def fetch_clinvar_info(gene, mutation):
    return [{"Gene": gene, "Mutation": mutation, "Pathogenicity": "Likely Pathogenic"}]

def fetch_dgidb_drugs(gene):
    try:
        url = f"https://dgidb.org/api/v2/interactions/{gene}"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            results = []
            for item in data.get("matchedTerms", []):
                for interaction in item.get("interactions", []):
                    results.append({
                        "Drug": interaction.get("drugName"),
                        "Interaction": ", ".join(interaction.get("interactionTypes", []))
                    })
            return results
        return [{"error": "No drug data found."}]
    except Exception as e:
        return [{"error": f"DGIdb API failed: {e}"}]

def fetch_clinical_trials(gene):
    try:
        url = f"https://clinicaltrials.gov/api/query/study_fields?expr={gene}&fields=BriefTitle,Condition,InterventionName,LocationCountry&min_rnk=1&max_rnk=10&fmt=json"
        response = requests.get(url)
        if response.status_code == 200:
            studies = response.json().get("StudyFieldsResponse", {}).get("StudyFields", [])
            return [{
                "Title": s.get("BriefTitle", [""])[0],
                "Condition": ", ".join(s.get("Condition", [])),
                "Country": ", ".join(s.get("LocationCountry", []))
            } for s in studies]
        return [{"error": "No clinical trial data found."}]
    except Exception as e:
        return [{"error": f"ClinicalTrials API failed: {e}"}]

class PDFReport(FPDF):
    def header(self):
        self.set_font('Arial', 'B', 16)
        self.cell(0, 10, 'ClinOmics AI - Clinical Genomics Report', ln=True, align='C')
        self.ln(5)
    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, 'Generated by ClinOmics AI', 0, 0, 'C')

def generate_pdf(gene, mutation, clinvar, drugs, trials):
    pdf = PDFReport()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(0, 10, f"Gene: {gene} Mutation: {mutation}", ln=True)
    pdf.ln(5)

    def add_section(title, items):
        pdf.set_font("Arial", 'B', 12)
        pdf.cell(0, 10, title, ln=True)
        pdf.set_font("Arial", '', 11)
        if not items:
            pdf.cell(0, 10, "No data available", ln=True)
        else:
            for row in items:
                line = ", ".join([f"{k}: {v}" for k, v in row.items()])
                pdf.multi_cell(0, 8, line)
                pdf.ln(2)
        pdf.ln(5)

    add_section("ClinVar Pathogenicity", clinvar)
    add_section("Drug Interactions (DGIdb)", drugs)
    add_section("Clinical Trials", trials)

    tmpfile = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    pdf.output(tmpfile.name)
    return tmpfile.name

gene = st.text_input("Enter Gene Symbol (e.g., TP53)", "TP53").upper()
mutation = st.text_input("Enter Mutation (e.g., R175H)", "R175H").upper()

if st.button("Analyze Gene"):
    with st.spinner("Fetching data..."):
        clinvar_data = fetch_clinvar_info(gene, mutation)
        drug_data = fetch_dgidb_drugs(gene)
        trial_data = fetch_clinical_trials(gene)

    st.subheader("ClinVar Pathogenicity")
    st.table(pd.DataFrame(clinvar_data))

    st.subheader("Drug Matches (DGIdb)")
    st.table(pd.DataFrame(drug_data))

    st.subheader("Clinical Trials")
    st.table(pd.DataFrame(trial_data))

    pdf_path = generate_pdf(gene, mutation, clinvar_data, drug_data, trial_data)
    with open(pdf_path, "rb") as f:
        st.download_button("Download Clinical Report (PDF)", f, file_name=f"{gene}_{mutation}_report.pdf")
    os.unlink(pdf_path)

st.markdown("""
<hr style='border: 1px solid #ddd;'>
<div style="text-align: center; color: gray;">
    <b>ClinOmics AI</b> â€” Powered by free bioinformatics APIs
</div>
""", unsafe_allow_html=True)
