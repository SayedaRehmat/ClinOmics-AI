 # app.py (Final Version for ClinOmics AI Pro)

import streamlit as st
import requests
import pandas as pd
from fpdf import FPDF
import tempfile
import os

st.set_page_config(page_title="ClinOmics AI Pro", layout="wide")
st.title("üß¨ ClinOmics AI Pro: Mutation, Drug, Trial AI Tool")

# ----------------------- Helper Functions -----------------------
def get_expression(gene):
    try:
        r = requests.get(f"https://autobio-x-api.onrender.com/expression/{gene}")
        return r.json().get("expression", {})
    except Exception as e:
        return {"error": f"Expression API failed: {e}"}

def get_mutations(gene):
    try:
        r = requests.get(f"https://autobio-x-api.onrender.com/mutation/{gene}")
        return r.json()
    except Exception as e:
        return [{"error": f"Mutation API failed: {e}"}]

def get_drugs_dgidb(gene):
    try:
        url = f"https://dgidb.org/api/v2/interactions.json?genes={gene}"
        r = requests.get(url)
        if r.status_code != 200:
            return [{"error": "DGIdb API failed."}]
        data = r.json()
        interactions = []
        for match in data.get("matchedTerms", []):
            for interaction in match.get("interactions", []):
                interactions.append({
                    "Drug": interaction.get("drugName"),
                    "Interaction": interaction.get("interactionTypes", ["unknown"])[0]
                })
        return interactions if interactions else [{"error": "No drug data found."}]
    except Exception as e:
        return [{"error": f"DGIdb API failed: {e}"}]

def get_trials(gene):
    try:
        base_url = "https://clinicaltrials.gov/api/query/study_fields"
        params = {
            "expr": gene,
            "fields": "NCTId,BriefTitle,Condition,LocationCountry",
            "min_rnk": 1,
            "max_rnk": 10,
            "fmt": "json"
        }
        r = requests.get(base_url, params=params)
        data = r.json()
        studies = data.get("StudyFieldsResponse", {}).get("StudyFields", [])
        return studies if studies else [{"error": "No trials found."}]
    except Exception as e:
        return [{"error": f"ClinicalTrials API failed: {e}"}]

def safe_text(text):
    return str(text).encode('latin1', 'ignore').decode('latin1')

# ----------------------- UI -----------------------
gene = st.text_input("üîç Enter Gene Symbol (e.g., TP53, BRCA1)").strip().upper()

if gene:
    expr = get_expression(gene)
    muts = get_mutations(gene)
    drugs = get_drugs_dgidb(gene)
    trials = get_trials(gene)

    if isinstance(expr, dict) and "error" not in expr:
        st.subheader("üìä Gene Expression")
        st.dataframe(pd.DataFrame(expr.items(), columns=["Sample", "Expression"]))
    else:
        st.warning(expr.get("error", "No expression data."))

    if isinstance(muts, list) and "error" not in muts[0]:
        st.subheader("üß¨ Mutations")
        st.table(pd.DataFrame(muts))
    else:
        st.warning(muts[0].get("error", "No mutation data."))

    if isinstance(drugs, list) and "error" not in drugs[0]:
        st.subheader("üíä Drug Matches (DGIdb)")
        st.table(pd.DataFrame(drugs))
    else:
        st.warning(drugs[0].get("error", "No drug matches."))

    if isinstance(trials, list) and "error" not in trials[0]:
        st.subheader("üß™ Clinical Trials")
        st.table(pd.DataFrame(trials))
    else:
        st.warning(trials[0].get("error", "No trials found."))

    # ----------------------- PDF Generation -----------------------
    if st.button("üì• Download PDF Report"):
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=14)
        pdf.cell(200, 10, txt=safe_text(f"ClinOmics AI Report: {gene}"), ln=True, align='C')
        pdf.ln(10)

        def write_section(title, rows):
            pdf.set_font("Arial", 'B', 12)
            pdf.cell(200, 10, txt=safe_text(title), ln=True)
            pdf.set_font("Arial", '', 12)
            for row in rows:
                for k, v in row.items():
                    pdf.cell(0, 10, txt=safe_text(f"{k}: {v}"), ln=True)
                pdf.ln(2)

        # Add sections
        write_section("Expression Data", [{"Sample": k, "Expression": v} for k, v in expr.items()] if isinstance(expr, dict) else [])
        write_section("Mutations", muts if isinstance(muts, list) else [])
        write_section("Drug Matches", drugs if isinstance(drugs, list) else [])
        write_section("Clinical Trials", trials if isinstance(trials, list) else [])

        pdf.ln(10)
        pdf.set_font("Arial", 'I', 10)
        pdf.cell(200, 10, txt="Generated by ClinOmics AI Pro", ln=True, align='C')

        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmpfile:
            pdf.output(tmpfile.name)
            with open(tmpfile.name, "rb") as f:
                st.download_button(
                    label="‚¨áÔ∏è Download Report",
                    data=f,
                    file_name=f"{gene}_ClinOmics_Report.pdf",
                    mime="application/pdf"
                )
            os.unlink(tmpfile.name)
