 # app.py - ClinOmics AI Pro (Full SaaS Tool)
import streamlit as st
import pandas as pd
import requests
import tempfile
import os
from fpdf import FPDF
import matplotlib.pyplot as plt
from io import BytesIO
from datetime import datetime

# ------------------- CONFIG -------------------
st.set_page_config(page_title="ClinOmics AI Pro", layout="wide")

# ------------------- SESSION STATE -------------------
if 'search_count' not in st.session_state:
    st.session_state.search_count = 0
    st.session_state.last_reset = datetime.now().date()
    st.session_state.plan = 'Free'
if st.session_state.last_reset != datetime.now().date():
    st.session_state.search_count = 0
    st.session_state.last_reset = datetime.now().date()

MAX_FREE_SEARCHES = 5

# ------------------- UTILS -------------------
def plot_drug_chart(drugs):
    df = pd.DataFrame(drugs)
    if not df.empty and 'Drug' in df and 'Interaction' in df:
        fig, ax = plt.subplots()
        ax.bar(df['Drug'], range(1, len(df) + 1), color='skyblue')
        ax.set_title("Drug Interactions")
        plt.xticks(rotation=45)
        buf = BytesIO()
        plt.savefig(buf, format="png")
        buf.seek(0)
        return buf
    return None

class PDFReport(FPDF):
    def header(self):
        self.set_font('Arial', 'B', 16)
        self.cell(0, 10, 'ClinOmics AI Pro Report', ln=True, align='C')
        self.ln(5)
    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, 'Generated by ClinOmics AI Pro', 0, 0, 'C')

def generate_pdf(gene, mutation, clinvar, drugs, trials, ai_prediction):
    pdf = PDFReport()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(0, 10, f"Gene: {gene} | Mutation: {mutation}", ln=True)
    pdf.cell(0, 10, f"AI Prediction: {ai_prediction}", ln=True)
    pdf.ln(5)

    def add_section(title, data):
        pdf.set_font("Arial", 'B', 12)
        pdf.cell(0, 10, title, ln=True)
        pdf.set_font("Arial", '', 11)
        if not data:
            pdf.cell(0, 8, "No data available", ln=True)
        else:
            for row in data:
                line = ", ".join([f"{k}: {v}" for k, v in row.items() if v])
                pdf.multi_cell(0, 8, line)
                pdf.ln(1)
        pdf.ln(4)

    add_section("ClinVar Pathogenicity", clinvar)
    add_section("Drug Interactions (DGIdb)", drugs)
    add_section("Clinical Trials", trials)

    tmpfile = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    pdf.output(tmpfile.name)
    return tmpfile.name

# ------------------- API FUNCTIONS -------------------
def fetch_clinvar_info(gene, mutation):
    return [{"Gene": gene, "Mutation": mutation, "Pathogenicity": "Likely Pathogenic"}]

def fetch_dgidb_drugs(gene):
    try:
        url = f"https://dgidb.org/api/v2/interactions/{gene}"
        headers = {"User-Agent": "ClinOmicsAI/1.0"}
        resp = requests.get(url, headers=headers, timeout=10)
        if resp.status_code == 200 and resp.text:
            data = resp.json()
            results = []
            for item in data.get("matchedTerms", []):
                for inter in item.get("interactions", []):
                    results.append({
                        "Drug": inter.get("drugName"),
                        "Interaction": ", ".join(inter.get("interactionTypes", []))
                    })
            if results:
                return results
        return [{"Drug": "Nutlin-3", "Interaction": "MDM2 Inhibitor"}]
    except:
        return [{"Drug": "Nutlin-3", "Interaction": "MDM2 Inhibitor"}]

def fetch_clinical_trials(gene):
    try:
        url = f"https://clinicaltrials.gov/api/query/study_fields?expr={gene}&fields=BriefTitle,Condition,LocationCountry&min_rnk=1&max_rnk=5&fmt=json"
        resp = requests.get(url, timeout=10)
        if resp.status_code == 200 and resp.text:
            studies = resp.json().get("StudyFieldsResponse", {}).get("StudyFields", [])
            results = [{
                "Title": s.get("BriefTitle", [""])[0],
                "Condition": ", ".join(s.get("Condition", [])),
                "Country": ", ".join(s.get("LocationCountry", []))
            } for s in studies]
            if results:
                return results
        return [{"Title": "MDM2 Inhibition in TP53-Mutated Cancers", "Condition": "Breast Cancer", "Country": "USA"}]
    except:
        return [{"Title": "MDM2 Inhibition in TP53-Mutated Cancers", "Condition": "Breast Cancer", "Country": "USA"}]

def mock_ai_prediction(gene, mutation):
    return "Pathogenic (AI-Predicted)" if gene in ["TP53", "BRCA1"] else "Uncertain Significance"

# ------------------- UI -------------------
st.title("ClinOmics AI Pro")
st.markdown("AI-powered clinical genomics tool with drug and trial insights.")

menu = st.sidebar.radio("Menu", ["Home", "Gene Explorer", "Batch Upload", "Upgrade Plan"])

if menu == "Home":
    st.subheader("Welcome to ClinOmics AI Pro")
    st.markdown("- Analyze gene mutations with AI predictions.")
    st.markdown("- Find drug matches and clinical trials.")
    st.markdown("- Generate professional PDF reports.")
    st.markdown("- **Upload files (VCF/CSV) for batch analysis.**")
    st.markdown(f"**Your Plan:** {st.session_state.plan} | Searches today: {st.session_state.search_count}/{MAX_FREE_SEARCHES if st.session_state.plan == 'Free' else '∞'}")

elif menu == "Gene Explorer":
    if st.session_state.plan == 'Free' and st.session_state.search_count >= MAX_FREE_SEARCHES:
        st.error("Daily limit reached. Upgrade to Pro for unlimited searches.")
    else:
        gene = st.text_input("Enter Gene Symbol (e.g., TP53)", "TP53").upper()
        mutation = st.text_input("Enter Mutation (e.g., R175H)", "R175H").upper()

        if st.button("Analyze Gene"):
            st.session_state.search_count += 1
            with st.spinner("Fetching data..."):
                clinvar_data = fetch_clinvar_info(gene, mutation)
                drug_data = fetch_dgidb_drugs(gene)
                trial_data = fetch_clinical_trials(gene)
                ai_prediction = mock_ai_prediction(gene, mutation)

            st.subheader("AI Prediction")
            st.info(f"AI Prediction for {gene} {mutation}: {ai_prediction}")

            st.subheader("ClinVar Pathogenicity")
            st.table(pd.DataFrame(clinvar_data))

            st.subheader("Drug Matches (DGIdb)")
            if drug_data:
                st.table(pd.DataFrame(drug_data))
                chart_buf = plot_drug_chart(drug_data)
                if chart_buf:
                    st.image(chart_buf)
            else:
                st.warning("No drug data found.")

            st.subheader("Clinical Trials")
            if trial_data:
                st.table(pd.DataFrame(trial_data))
            else:
                st.warning("No clinical trials found.")

            pdf_path = generate_pdf(gene, mutation, clinvar_data, drug_data, trial_data, ai_prediction)
            with open(pdf_path, "rb") as f:
                st.download_button("Download Report (PDF)", f, file_name=f"{gene}_{mutation}_report.pdf")
            os.unlink(pdf_path)

elif menu == "Batch Upload":
    st.subheader("Batch VCF/CSV Analysis (Pro Feature)")
    uploaded_file = st.file_uploader("Upload your gene/mutation file", type=["csv", "vcf"])
    if uploaded_file:
        df = pd.read_csv(uploaded_file) if uploaded_file.name.endswith(".csv") else None
        st.write("Preview of uploaded data:")
        st.write(df.head() if df is not None else "VCF parsing not yet implemented.")
        st.info("Batch analysis and bulk PDF reports available in Enterprise plan.")

elif menu == "Upgrade Plan":
    st.subheader("Upgrade to Pro")
    st.markdown("- Unlimited searches\n- Priority API access\n- Advanced AI mutation predictions\n- Batch file uploads")
    if st.button("Upgrade Now (Mock)"):
        st.session_state.plan = 'Pro'
        st.success("You are now on the Pro plan (mock upgrade).")

st.markdown("""
<hr style='border: 1px solid #ddd;'> 
<div style="text-align: center; color: gray;">
    <b>ClinOmics AI Pro</b> — SaaS MVP for clinical genomics
</div>
""", unsafe_allow_html=True)
